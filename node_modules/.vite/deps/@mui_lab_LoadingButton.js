import "./chunk-CZA2BY56.js";
import {
  CircularProgress_default
} from "./chunk-QDGSMLU4.js";
import {
  Button_default
} from "./chunk-N2EL3H3E.js";
import {
  ButtonGroupContext_default
} from "./chunk-6YSO565J.js";
import "./chunk-JPY3NWFA.js";
import "./chunk-CM52QXNW.js";
import "./chunk-NGCMPNMA.js";
import "./chunk-A4V5BH4F.js";
import "./chunk-CE7ZVCG5.js";
import "./chunk-E54D2QTQ.js";
import {
  useId_default
} from "./chunk-N66CCW2F.js";
import "./chunk-ZVEKGIX7.js";
import "./chunk-NEHGYYSB.js";
import "./chunk-CYT3NR4Q.js";
import "./chunk-YMXPL6LB.js";
import "./chunk-NQQGRV2W.js";
import "./chunk-YKMDGQ5Z.js";
import "./chunk-VI4S6YK7.js";
import "./chunk-LZ5R2THA.js";
import "./chunk-R2LKUEYH.js";
import {
  capitalize_default
} from "./chunk-Z6VD5PYG.js";
import {
  memoTheme_default
} from "./chunk-FDICS7I2.js";
import "./chunk-ERCJBVSS.js";
import "./chunk-D2GN436R.js";
import {
  useDefaultProps
} from "./chunk-BFXE5CZ5.js";
import "./chunk-DSEIU2F4.js";
import "./chunk-2MCGDOFG.js";
import "./chunk-ROXRO4OL.js";
import "./chunk-6XPEYTS2.js";
import {
  styled_default
} from "./chunk-ZR72VI34.js";
import "./chunk-664WL53A.js";
import "./chunk-WCB7ZZQ3.js";
import "./chunk-TMPZZT6Z.js";
import {
  require_jsx_runtime
} from "./chunk-EM7HWY4Y.js";
import {
  chainPropTypes,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-HTEZ7IL2.js";
import {
  resolveProps
} from "./chunk-7YWBFB7J.js";
import {
  require_prop_types
} from "./chunk-MVBLUKDZ.js";
import "./chunk-GYGRNMHX.js";
import "./chunk-LPEJYT6W.js";
import "./chunk-O3QYGZ23.js";
import "./chunk-GWZRTDAU.js";
import "./chunk-KCD7PEB5.js";
import {
  require_react
} from "./chunk-KBP2TVUK.js";
import "./chunk-CLOXY5HG.js";
import "./chunk-YUUZGYL5.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/.pnpm/@mui+lab@6.0.0-beta.21_@emotion+react@11.14.0_@types+react@18.3.18_react@18.3.1__@emotion+sty_g5rsrd7576tbsuzn66rbx5hvlu/node_modules/@mui/lab/LoadingButton/LoadingButton.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/.pnpm/@mui+lab@6.0.0-beta.21_@emotion+react@11.14.0_@types+react@18.3.18_react@18.3.1__@emotion+sty_g5rsrd7576tbsuzn66rbx5hvlu/node_modules/@mui/lab/LoadingButton/loadingButtonClasses.js
function getLoadingButtonUtilityClass(slot) {
  return generateUtilityClass("MuiLoadingButton", slot);
}
var loadingButtonClasses = generateUtilityClasses("MuiLoadingButton", ["root", "label", "loading", "loadingIndicator", "loadingIndicatorCenter", "loadingIndicatorStart", "loadingIndicatorEnd", "endIconLoadingEnd", "startIconLoadingStart"]);
var loadingButtonClasses_default = loadingButtonClasses;

// node_modules/.pnpm/@mui+lab@6.0.0-beta.21_@emotion+react@11.14.0_@types+react@18.3.18_react@18.3.1__@emotion+sty_g5rsrd7576tbsuzn66rbx5hvlu/node_modules/@mui/lab/LoadingButton/LoadingButton.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var useUtilityClasses = (ownerState) => {
  const {
    loading,
    loadingPosition,
    classes
  } = ownerState;
  const slots = {
    root: ["root", loading && "loading"],
    label: ["label"],
    startIcon: [loading && `startIconLoading${capitalize_default(loadingPosition)}`],
    endIcon: [loading && `endIconLoading${capitalize_default(loadingPosition)}`],
    loadingIndicator: ["loadingIndicator", loading && `loadingIndicator${capitalize_default(loadingPosition)}`]
  };
  const composedClasses = composeClasses(slots, getLoadingButtonUtilityClass, classes);
  return {
    ...classes,
    // forward the outlined, color, etc. classes to Button
    ...composedClasses
  };
};
var rootShouldForwardProp = (prop) => prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as" && prop !== "classes";
var LoadingButtonRoot = styled_default(Button_default, {
  shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
  name: "MuiLoadingButton",
  slot: "Root",
  overridesResolver: (props, styles) => {
    return [styles.root, styles.startIconLoadingStart && {
      [`& .${loadingButtonClasses_default.startIconLoadingStart}`]: styles.startIconLoadingStart
    }, styles.endIconLoadingEnd && {
      [`& .${loadingButtonClasses_default.endIconLoadingEnd}`]: styles.endIconLoadingEnd
    }];
  }
})(memoTheme_default(({
  theme
}) => ({
  display: "inline-flex",
  [`& .${loadingButtonClasses_default.startIconLoadingStart}, & .${loadingButtonClasses_default.endIconLoadingEnd}`]: {
    transition: theme.transitions.create(["opacity"], {
      duration: theme.transitions.duration.short
    }),
    opacity: 0
  },
  variants: [{
    props: {
      loadingPosition: "center"
    },
    style: {
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color"], {
        duration: theme.transitions.duration.short
      }),
      [`&.${loadingButtonClasses_default.loading}`]: {
        color: "transparent"
      }
    }
  }, {
    props: ({
      ownerState
    }) => ownerState.loadingPosition === "start" && ownerState.fullWidth,
    style: {
      [`& .${loadingButtonClasses_default.startIconLoadingStart}, & .${loadingButtonClasses_default.endIconLoadingEnd}`]: {
        transition: theme.transitions.create(["opacity"], {
          duration: theme.transitions.duration.short
        }),
        opacity: 0,
        marginRight: -8
      }
    }
  }, {
    props: ({
      ownerState
    }) => ownerState.loadingPosition === "end" && ownerState.fullWidth,
    style: {
      [`& .${loadingButtonClasses_default.startIconLoadingStart}, & .${loadingButtonClasses_default.endIconLoadingEnd}`]: {
        transition: theme.transitions.create(["opacity"], {
          duration: theme.transitions.duration.short
        }),
        opacity: 0,
        marginLeft: -8
      }
    }
  }]
})));
var LoadingButtonLoadingIndicator = styled_default("span", {
  name: "MuiLoadingButton",
  slot: "LoadingIndicator",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.loadingIndicator, styles[`loadingIndicator${capitalize_default(ownerState.loadingPosition)}`]];
  }
})(memoTheme_default(({
  theme
}) => ({
  position: "absolute",
  visibility: "visible",
  display: "flex",
  variants: [{
    props: {
      loadingPosition: "start",
      size: "small"
    },
    style: {
      left: 10
    }
  }, {
    props: ({
      loadingPosition,
      ownerState
    }) => loadingPosition === "start" && ownerState.size !== "small",
    style: {
      left: 14
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "start"
    },
    style: {
      left: 6
    }
  }, {
    props: {
      loadingPosition: "center"
    },
    style: {
      left: "50%",
      transform: "translate(-50%)",
      color: (theme.vars || theme).palette.action.disabled
    }
  }, {
    props: {
      loadingPosition: "end",
      size: "small"
    },
    style: {
      right: 10
    }
  }, {
    props: ({
      loadingPosition,
      ownerState
    }) => loadingPosition === "end" && ownerState.size !== "small",
    style: {
      right: 14
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "end"
    },
    style: {
      right: 6
    }
  }, {
    props: ({
      ownerState
    }) => ownerState.loadingPosition === "start" && ownerState.fullWidth,
    style: {
      position: "relative",
      left: -10
    }
  }, {
    props: ({
      ownerState
    }) => ownerState.loadingPosition === "end" && ownerState.fullWidth,
    style: {
      position: "relative",
      right: -10
    }
  }]
})));
var LoadingButtonLabel = styled_default("span", {
  name: "MuiLoadingButton",
  slot: "Label",
  overridesResolver: (props, styles) => {
    return [styles.label];
  }
})({
  display: "inherit",
  alignItems: "inherit",
  justifyContent: "inherit"
});
var LoadingButton = React.forwardRef(function LoadingButton2(inProps, ref) {
  const contextProps = React.useContext(ButtonGroupContext_default);
  const resolvedProps = resolveProps(contextProps, inProps);
  const props = useDefaultProps({
    props: resolvedProps,
    name: "MuiLoadingButton"
  });
  const {
    children,
    disabled = false,
    id: idProp,
    loading = false,
    loadingIndicator: loadingIndicatorProp,
    loadingPosition = "center",
    variant = "text",
    ...other
  } = props;
  const id = useId_default(idProp);
  const loadingIndicator = loadingIndicatorProp ?? (0, import_jsx_runtime.jsx)(CircularProgress_default, {
    "aria-labelledby": id,
    color: "inherit",
    size: 16
  });
  const ownerState = {
    ...props,
    disabled,
    loading,
    loadingIndicator,
    loadingPosition,
    variant
  };
  const classes = useUtilityClasses(ownerState);
  const loadingButtonLoadingIndicator = loading ? (0, import_jsx_runtime.jsx)(LoadingButtonLoadingIndicator, {
    className: classes.loadingIndicator,
    ownerState,
    children: loadingIndicator
  }) : null;
  return (0, import_jsx_runtime.jsxs)(LoadingButtonRoot, {
    disabled: disabled || loading,
    id,
    ref,
    ...other,
    variant,
    classes,
    ownerState,
    children: [ownerState.loadingPosition === "end" ? (0, import_jsx_runtime.jsx)(LoadingButtonLabel, {
      className: classes.label,
      children
    }) : loadingButtonLoadingIndicator, ownerState.loadingPosition === "end" ? loadingButtonLoadingIndicator : (0, import_jsx_runtime.jsx)(LoadingButtonLabel, {
      className: classes.label,
      children
    })]
  });
});
true ? LoadingButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types.default.object,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types.default.string,
  /**
   * If `true`, the loading indicator is shown and the button becomes disabled.
   * @default false
   */
  loading: import_prop_types.default.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default we render a `CircularProgress` that is labelled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: import_prop_types.default.node,
  /**
   * The loading indicator can be positioned on the start, end, or the center of the button.
   * @default 'center'
   */
  loadingPosition: chainPropTypes(import_prop_types.default.oneOf(["start", "end", "center"]), (props) => {
    if (props.loadingPosition === "start" && !props.startIcon) {
      return new Error(`MUI: The loadingPosition="start" should be used in combination with startIcon.`);
    }
    if (props.loadingPosition === "end" && !props.endIcon) {
      return new Error(`MUI: The loadingPosition="end" should be used in combination with endIcon.`);
    }
    return null;
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["contained", "outlined", "text"]), import_prop_types.default.string])
} : void 0;
var LoadingButton_default = LoadingButton;
export {
  LoadingButton_default as default,
  getLoadingButtonUtilityClass,
  loadingButtonClasses_default as loadingButtonClasses
};
//# sourceMappingURL=@mui_lab_LoadingButton.js.map
