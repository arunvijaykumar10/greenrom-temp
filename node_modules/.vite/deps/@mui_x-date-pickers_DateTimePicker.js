import {
  DesktopDateTimePicker
} from "./chunk-NFP7ZD6E.js";
import {
  MobileDateTimePicker
} from "./chunk-IWOV7X7H.js";
import {
  DateTimePickerTabs,
  DateTimePickerToolbar,
  dateTimePickerTabsClasses,
  dateTimePickerToolbarClasses
} from "./chunk-GWWNRJL2.js";
import "./chunk-MYZ4ZFNN.js";
import "./chunk-4GGPIAQD.js";
import "./chunk-JZVCDOID.js";
import "./chunk-GZKKAGHK.js";
import "./chunk-YWSKQUE4.js";
import "./chunk-JWX4P6WS.js";
import "./chunk-AOJDJS5B.js";
import {
  DEFAULT_DESKTOP_MODE_MEDIA_QUERY
} from "./chunk-MTLJWYH4.js";
import "./chunk-FGL4NL3J.js";
import "./chunk-CJW4742R.js";
import "./chunk-TKGL4CXQ.js";
import "./chunk-OAXPDFWZ.js";
import "./chunk-VBGN2UEN.js";
import "./chunk-IPYJVFDA.js";
import "./chunk-D6AQ4BQU.js";
import "./chunk-SG4RUTCP.js";
import "./chunk-UKCWE2J7.js";
import {
  useMediaQuery_default
} from "./chunk-ETEUPNAN.js";
import "./chunk-UZ3A7ZAW.js";
import "./chunk-IQUMVZV6.js";
import "./chunk-OO6B6IUR.js";
import "./chunk-KW7JYLU5.js";
import "./chunk-YL7OISIK.js";
import "./chunk-OOBKEF4V.js";
import "./chunk-62WLK26R.js";
import "./chunk-D3E6AUDM.js";
import "./chunk-TR6QZBEQ.js";
import "./chunk-ZVPNHNTF.js";
import "./chunk-Y5ZQVVSH.js";
import "./chunk-5OH6XZ7C.js";
import "./chunk-LKMGRXSD.js";
import "./chunk-Z3FOCE4S.js";
import "./chunk-O5IYY26Z.js";
import "./chunk-IXOT3CAL.js";
import "./chunk-C3LVTRX4.js";
import "./chunk-PZO77CRP.js";
import "./chunk-CHBN3JMQ.js";
import "./chunk-4VDQLFPR.js";
import "./chunk-US4UPG5I.js";
import "./chunk-UJ47EKLM.js";
import "./chunk-DJDRE24D.js";
import "./chunk-LGNPXFP3.js";
import "./chunk-EGK5NCHE.js";
import "./chunk-4JZI3NPO.js";
import "./chunk-I66UUXBG.js";
import "./chunk-MTFPAS52.js";
import "./chunk-XIJGN4SM.js";
import "./chunk-AH26UIJ7.js";
import "./chunk-4Q3MXG7F.js";
import "./chunk-KDU6V34U.js";
import "./chunk-EB6CGWA5.js";
import "./chunk-QPQGVQI7.js";
import "./chunk-V7B2JHU7.js";
import "./chunk-2OTJ5WOL.js";
import "./chunk-WQGCACF7.js";
import "./chunk-SJEBWNX5.js";
import "./chunk-YUK7VPTQ.js";
import "./chunk-PGMFLTB4.js";
import "./chunk-R7T4AXEZ.js";
import "./chunk-V2RAEAZB.js";
import "./chunk-6SBRGSXR.js";
import "./chunk-F7AAVXIN.js";
import "./chunk-PLKRF3N2.js";
import "./chunk-S7TZ32SC.js";
import "./chunk-743TZC4M.js";
import "./chunk-KRREY3IC.js";
import "./chunk-N2EL3H3E.js";
import "./chunk-6YSO565J.js";
import "./chunk-JPY3NWFA.js";
import "./chunk-CM52QXNW.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-NGCMPNMA.js";
import "./chunk-A4V5BH4F.js";
import "./chunk-CE7ZVCG5.js";
import "./chunk-E54D2QTQ.js";
import "./chunk-N66CCW2F.js";
import "./chunk-ZVEKGIX7.js";
import "./chunk-NEHGYYSB.js";
import "./chunk-CYT3NR4Q.js";
import "./chunk-YMXPL6LB.js";
import "./chunk-NQQGRV2W.js";
import "./chunk-YKMDGQ5Z.js";
import "./chunk-VI4S6YK7.js";
import "./chunk-LZ5R2THA.js";
import "./chunk-R2LKUEYH.js";
import "./chunk-Z6VD5PYG.js";
import "./chunk-FDICS7I2.js";
import "./chunk-ERCJBVSS.js";
import "./chunk-D2GN436R.js";
import "./chunk-BFXE5CZ5.js";
import {
  useThemeProps
} from "./chunk-2MCGDOFG.js";
import "./chunk-ROXRO4OL.js";
import "./chunk-6XPEYTS2.js";
import "./chunk-ZR72VI34.js";
import "./chunk-664WL53A.js";
import "./chunk-WCB7ZZQ3.js";
import "./chunk-TMPZZT6Z.js";
import {
  require_jsx_runtime
} from "./chunk-EM7HWY4Y.js";
import {
  refType_default
} from "./chunk-HTEZ7IL2.js";
import "./chunk-7YWBFB7J.js";
import {
  require_prop_types
} from "./chunk-MVBLUKDZ.js";
import "./chunk-GYGRNMHX.js";
import "./chunk-LPEJYT6W.js";
import "./chunk-O3QYGZ23.js";
import {
  _extends
} from "./chunk-GWZRTDAU.js";
import "./chunk-KCD7PEB5.js";
import {
  require_react
} from "./chunk-KBP2TVUK.js";
import "./chunk-CLOXY5HG.js";
import "./chunk-YUUZGYL5.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/.pnpm/@mui+x-date-pickers@7.23.3_@emotion+react@11.14.0_@types+react@18.3.18_react@18.3.1__@emotion_ji6hvli62yuhifitinmcwh6fr4/node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["desktopModeMediaQuery"];
var DateTimePicker = React.forwardRef(function DateTimePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDateTimePicker"
  });
  const {
    desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const isDesktop = useMediaQuery_default(desktopModeMediaQuery, {
    defaultMatches: true
  });
  if (isDesktop) {
    return (0, import_jsx_runtime.jsx)(DesktopDateTimePicker, _extends({
      ref
    }, other));
  }
  return (0, import_jsx_runtime.jsx)(MobileDateTimePicker, _extends({
    ref
  }, other));
});
true ? DateTimePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * 12h/24h view for hour selection clock.
   * @default utils.is12HourCycleInCurrentLocale()
   */
  ampm: import_prop_types.default.bool,
  /**
   * Display ampm controls under the clock (instead of in the toolbar).
   * @default true on desktop, false on mobile
   */
  ampmInClock: import_prop_types.default.bool,
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: import_prop_types.default.bool,
  className: import_prop_types.default.string,
  /**
   * If `true`, the popover or modal will close after submitting the full date.
   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  closeOnSelect: import_prop_types.default.bool,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {TDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: import_prop_types.default.func,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: import_prop_types.default.object,
  /**
   * CSS media query when `Mobile` mode will be changed to `Desktop`.
   * @default '@media (pointer: fine)'
   * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
   */
  desktopModeMediaQuery: import_prop_types.default.string,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: import_prop_types.default.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: import_prop_types.default.bool,
  /**
   * Do not ignore date part when validating min/max time.
   * @default false
   */
  disableIgnoringDatePartForTimeValidation: import_prop_types.default.bool,
  /**
   * If `true`, the open picker button will not be rendered (renders only the field).
   * @default false
   */
  disableOpenPicker: import_prop_types.default.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: import_prop_types.default.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: import_prop_types.default.bool,
  /**
   * @default false
   */
  enableAccessibleFieldDOMStructure: import_prop_types.default.any,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: import_prop_types.default.number,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: import_prop_types.default.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: import_prop_types.default.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType_default,
  /**
   * The label content.
   */
  label: import_prop_types.default.node,
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: import_prop_types.default.bool,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: import_prop_types.default.object,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: import_prop_types.default.object,
  /**
   * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
   */
  maxDateTime: import_prop_types.default.object,
  /**
   * Maximal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  maxTime: import_prop_types.default.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: import_prop_types.default.object,
  /**
   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
   */
  minDateTime: import_prop_types.default.object,
  /**
   * Minimal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  minTime: import_prop_types.default.object,
  /**
   * Step over minutes.
   * @default 1
   */
  minutesStep: import_prop_types.default.number,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: import_prop_types.default.oneOf([3, 4]),
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: import_prop_types.default.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: import_prop_types.default.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: import_prop_types.default.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: import_prop_types.default.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: import_prop_types.default.func,
  /**
   * Callback fired on month change.
   * @template TDate
   * @param {TDate} month The new month.
   */
  onMonthChange: import_prop_types.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: import_prop_types.default.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: import_prop_types.default.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: import_prop_types.default.func,
  /**
   * Callback fired on year change.
   * @template TDate
   * @param {TDate} year The new year.
   */
  onYearChange: import_prop_types.default.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: import_prop_types.default.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: import_prop_types.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types.default.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: import_prop_types.default.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: import_prop_types.default.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: import_prop_types.default.func,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types.default.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @template TDate
   * @param {TDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: import_prop_types.default.func,
  /**
   * Disable specific month.
   * @template TDate
   * @param {TDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: import_prop_types.default.func,
  /**
   * Disable specific time.
   * @template TDate
   * @param {TDate} value The value to check.
   * @param {TimeView} view The clock type of the timeValue.
   * @returns {boolean} If `true` the time will be disabled.
   */
  shouldDisableTime: import_prop_types.default.func,
  /**
   * Disable specific year.
   * @template TDate
   * @param {TDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: import_prop_types.default.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: import_prop_types.default.bool,
  /**
   * If `true`, disabled digital clock items will not be rendered.
   * @default false
   */
  skipDisabled: import_prop_types.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * Amount of time options below or at which the single column time renderer is used.
   * @default 24
   */
  thresholdToRenderTimeInASingleColumn: import_prop_types.default.number,
  /**
   * The time steps between two time unit options.
   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
   * When single column time renderer is used, only `timeStep.minutes` will be used.
   * @default{ hours: 1, minutes: 5, seconds: 5 }
   */
  timeSteps: import_prop_types.default.shape({
    hours: import_prop_types.default.number,
    minutes: import_prop_types.default.number,
    seconds: import_prop_types.default.number
  }),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: import_prop_types.default.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: import_prop_types.default.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: import_prop_types.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: import_prop_types.default.shape({
    day: import_prop_types.default.func,
    hours: import_prop_types.default.func,
    meridiem: import_prop_types.default.func,
    minutes: import_prop_types.default.func,
    month: import_prop_types.default.func,
    seconds: import_prop_types.default.func,
    year: import_prop_types.default.func
  }),
  /**
   * Available views.
   */
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: import_prop_types.default.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 4 on desktop, 3 on mobile
   */
  yearsPerRow: import_prop_types.default.oneOf([3, 4])
} : void 0;
export {
  DateTimePicker,
  DateTimePickerTabs,
  DateTimePickerToolbar,
  dateTimePickerTabsClasses,
  dateTimePickerToolbarClasses
};
//# sourceMappingURL=@mui_x-date-pickers_DateTimePicker.js.map
